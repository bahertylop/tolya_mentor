3. какой паттерн лежит в основе иерархии InputStream?

паттерн цепочка обязанностей
https://habr.com/ru/articles/727454/


7. SOlid

какая кодовая база считается хорошей?
    1. Масштабируемость, легко вносить изменения
    2. Низкий порог вхождения в проект, новым людям легко войти в проект
    3. Код должен быть простым


принципы SOLID:
    1. S - single responsibility principle (1 класс - 1 задача)
        1 сущность - 1 задача, это обеспечивает невысокую связанность, читаемость, легко вносить изменения
        плохо не использовать декомпозицию
        антипаттерн GodObject - когда один класс делает все подряд
        модульность кода
    2. O - open-closed principle - принцип закрытости и открытости
        програмные сущности должны быть открыты для расширения, но закрыты для изменения
    3. L - Liskov Substitution principle - принцип подстановки Барбары Лисков
        функции и сущности, использующие родительский тип, должны точно так же работать с дочерними классами
        (родительский класс должен дополнять, а не замещать поведение базового класса)
    4. I - interface segregation principle - принципы разделения интерфейса
        (програмные сущности не должны зависеть от методов, которые они не используют)
        пример:
            есть интерфейс с 3 методами, его реализует класс,
            далее нужно создать еще класс, но ему подходят 2 метода (первый и второй) из данного интерфейса
            далее нужно создать еще класс, но ему подходят 2 метода (первый и третий) из данного интерфейса

            нужно было разбить большой интерфейс на мелкие и реализовывать столько, сколько нужно
    5. D - dependency inversion principle - принцип инверсии зависимостей
        (модули высокого не должны зависеть от модуей низкого уровня, все они должны зависеть от абстракций,
        абстракции не должны зависеть от деталей, детали должны зависеть от абстракций)