6. 


7.  к 3.5.2
В классе ASCICharSquence написать метод subSequence(int start), который будет возвращать подполедовательность
(экземпляр ASCICharSquence) от заданного символа до конца строки

и еще метод delete(int from, int to), который возвращает последовательность (экземпляр ASCICharSquence)
символов с удаленными символами от from до to, при этом "сжимая" строку, объект на котором был вызван метод меняться не должен
пример на псевдокоде!
Ялюблюсобак.delete(1,4) == Ясобак

решено для английских букв
второе 2 способами


8. доп к заданию 3.5.3
Написать текстовый анализатор, который бы конструировался от массива ключевых слов и максимального количества
употребления одного ключевого слова возвращает метку TOO_MUCH_KEYWORDS в случае, если хотя-бы одно из слов
встречается больше чем заданное максимальное число

Ключевые слова: джава
Макс количество: 3

Текст: я джава, я учу людей джава, джава чертовски хорош, джава это куча денег, джава
Ответ анализатор TOO_MUCH_KEYWORDS

Текст: джава это круто
Ответ: OK

задача решена, класс TooMuchKeyWordsAnalyzer в папке text_analozier

9. в каких случаях использовать абстрактный класс а в каких интерфейс?

абстрактный класс, когда есть общие поля, которые можно объявить в абстрактном классе
интерфейс когда только функционал

полностью абстрактный класс может иметь состояние, а интерфейс - нет.
Отсюда вытекает использование:
    если у наследников должно быть общее описание состояния - использовать абстрактный класс,
    во всех других случаях - интерфейс.

3 класса описывающие схожие сущности, имеют метод\ы с одинаковой реализацией,
тогда выносим этот метод в абстрактный класс. если есть поля с которыми метод взаимодействует, то их тоже в абстрактный класс

поля в интерфесах только public static final инициализированы (то есть константы по сути)

10. нахуя return null в абстрактном классе?
тупанул, автоматическая имплементация, пофикшено, теперь буду смотреть че за код генерится
идея с выносом keywords в абстрактный класс


11. как работает final?

final в java могут быть разные вещи:
    классы
    поля
    методы
    переменные
    аргументы

    пример всего в классе FinalExample


12. как передаются параметры в методе?

public class Example {
    public static void main(String[] args) {
        final int[] mas = {0, 0, 0};
        anotherMethod(mas);
        System.out.println(Arrays.toString(mas));
    }
    public static void method(int[] arr) {
        arr[0] = 999;
    }
  public static void anotherMethod(int[] arr) {
        int[] mas = {1,1,1};
        arr = mas;

    }
}

В java все параметры передаются по значению,
только для примитивов создается копия переданного аргумента,
а для объектов и массивов передается копия ссылки (можно изменять начальное значение, но саму ссылку изменить нельзя)

поэтому, в случае method(int[] arr) число изменится,
         в случае anotherMethod(int[] arr) массив не изменится, т.к. изменится значение ссылки, а не содержимое

         при этом, даже если объявить mas final, это ничего не изменит, содержимое также можно будет изменить,
         но сам объект заменить не получится

         при этом в самом методе main нельзя изменить ссылку на объект (присвоить переменной ссылку на другой объект,
         изменять же содердимое можно.



