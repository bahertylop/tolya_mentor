1. Что такое класс в java?
шаблон или модель по которой создается объект
описывает свойста и функционал

2. Что такое объект?
это экземпляр класса

3. Принципы ООП:
    инкапсуляция
    наследование
    полиморфизм
    абстракция

4. Инкапсуляция это?
Инкапсуляция – это свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе и скрыть детали
реализации от пользователя.
Инкапсуляция неразрывно связана с понятием интерфейса класса. По сути, всё то, что не входит в интерфейс, инкапсулируется в классе.

Толино: Свойство системы, которое объединяет данные и методы, манипулирующие этими данными, а также защищает и то,
        и другое от внешнего вмешательства или неправильного использования. Инкапсуляция - это объединение данных и
        методов работы с этими данными в одной упаковке («капсуле»). Чтобы малейшее изменение в классе не влекло за собой
        изменение внешнего поведения класса.

предоставление интерфейса для взимодействия

объяснить на примере машины

5. Наследование это?
наследование — это механизм, который позволяет классу наследовать свойства и поведение другого класса .
Это фундаментальная концепция в ООП, которая способствует повторному использованию кода и устанавливает связи между классами.

Толино: Свойство системы, которое позволяет описать новый класс на основе уже существующего с частично или полностью
заимствованной функциональностью.

рассказать на основе поколений машин рестайлингов
или на сообщениях

6. Полиморфизм это?
Полиморфизм – это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.
позволяет нам обращаться с различными типами объектов так, как будто они одного типа

Преимуществом полиморфизма является то, что он помогает снижать сложность программ, разрешая использование одного и того же
интерфейса для задания единого набора действий. Выбор же конкретного действия, в зависимости от ситуации, возлагается
на компилятор языка программирования. Отсюда следует ключевая особенность полиморфизма - использование объекта производного
класса, вместо объекта базового (потомки могут изменять родительское поведение, даже если обращение к ним будет производиться по ссылке
родительского типа).

Наследование — это способ обеспечить возможность повторного использования кода,
а полиморфизм — это способ динамического определения того, какая версия функции будет вызываться.

обработка комбинаций карт в покере

7. Абстракция это?



8. Плюсы и минусы ООП:
    Плюсы:
        Легко читается - не нужно выискивать в коде функции и выяснять, за что они отвечают
        Быстро пишется - можно быстро создать сущности, с которыми должна работать программа.
        Простота реализации большого функционала - т.к. на написание кода уходит меньше времени,
            можно гораздо быстрее создать приложение с множеством возможностей
        Меньше повторений кода - не нужно писать однотипные функции для разных сущностей

    Минусы:
        Снижает производительность - многие вещи технически реализованы иначе, поэтому они используют больше ресурсов.
        Сложно начать - парадигма ООП сложнее функционального программирования, поэтому на старт уходит больше времени.

9. отличие абстрактных классов от интерфейсов

    1. Интерфейс описывает только поведение (методы) объекта, а вот состояний (полей) у него нет (кроме public static final),
в то время как у абстрактного класса они могут быть.
    2. Мы можем наследовать только один класс, а реализовать интерфейсов — сколько угодно. Интерфейс может наследовать (extends)
другой интерфейс/интерфейсы.
    3. Абстрактные классы используются, когда есть отношение "is-a", то есть класс-наследник расширяет базовый абстрактный
класс, а интерфейсы могут быть реализованы разными классами, вовсе не связанными друг с другом.
    4. Абстрактный класс может реализовывать методы; интерфейс может реализовывать дефолтные методы начиная с 8й версии.


10. отличие статических вложенных от нестатических

статические не имеют доступа к нестатическим полям и методам обертки
разное создание объектов класса


protected