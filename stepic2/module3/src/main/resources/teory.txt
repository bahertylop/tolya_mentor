JDBC (Java DataBase Connectivity)
штука для связи кода и базы данных

ORM (Object Relational Mapping)
предаствление таблиц в виде объектов

JPA (Java Persistence API)
интерфейс для работы с базами данных

Hibernate (популярная библиотека для ORM, implements JPA)
библиотека реализует JPA

DAO (Data Access Object)
объект предоставляющий доступ к базе данных
то, во что заворачивается непосредственно работа с базой данных


JDBC - Java Database Connectivity - API для работы с базами приложений на Java
предназначена для работы с реляционными базами данных
не зависит от конкретного типа базы
реализация в java.sql и javax.sql
чтобы можно было работать с определенной базой данных под нее пишется драйвер

JDBC API
    Connection - объект отвечает за соединение с базой и режим работы с ней
    Statement - объект предоставляет выражение обращения к базе
    ResultSet - Объект с результатом запроса, который вернула база

JDBC Driver Manager - библиотечка под определенную базу данных
управляется с помощью java.sql.DriverManager

Statements:
    Update statements: CREATE, INSERT, DELETE  - возвращают количество измененных строк
    Query statements: SELECT                   - возвращают запрошенные данные (ResultSet)

    Интерфейсы:
        Statement                  - любые запросы
        PreparedStatement          - возможность создать запрос с помощью подстановки параметров
        CallableStatement          - работа с хранимыми процедурами (подшарить)

параметры в prepared statement задаются как ?, индексы начинаются с 1, значения задаются с помощью setParameter()

ResultSet - объект, содержащий результат запроса
методы:
    изначально указатель перед первой строкой
    next()      - следующая строка
    previous()  - предыдущая строка
    isLast()    - последняя ли строка

    индексы начинаются с 1, не с нуля
    доступ к полям текущей строки:
        getBoolean(String name), getLong(String name), ... (по имени столбца)
        getBoolean(int index), getLong(int index), ... (по номеру столбца)

все обращения нужно закрывать вручную:
    resultSet.close()
    statement.close()
    connection.close()

    или использовать AutoClosable
    (try с ресурсами)


Executor - объект, который содержит методы для работы с запросами
    Обработка запроса на создание, вставку, обновление и удаление
        execUpdate(Connection connection, String update)
    Обработка запросов на получение данных
        execQuery(Connection connection, String query, ResultHandler handler)

    public interface ResultHandler {
        void handle(ResultSet result) throws SQLException
    }

    TExecutor


Transactions
Транзакции - действия, которые выполняются либо целиком, либо не выполняются совсем
по умолчанию auto-commit после выполнения каждого statement
void setAutoCommit(boolean autoCommit) - задать значение автокоммита
void commit() - выполнить коммит
void rollback() - выполнить откат
для транзакций нужна поддержка транзакций базой данных

Когда закроется транзакция, если ими не управлять
Что такое "выполнено" зависит от типа SQL выражения:
Data Manipulation Language, он же DML (Insert, Update, Delete)
Транзакция завершается как только завершилось выполнение действия
Select Statements
Транзакция завершается тогда, когда ResultSet будет закрыт (ResultSet#close)
CallableStatement и выражения, возвращающие несколько результатов
Когда все ассоциированные ResultSets будут закрыты и все выходные данные получены (включая кол-во апдейтов)

ACID описывает требования к транзакционной системе.
    Atomicity(Атомарность):
        Никакая транзакция не будет зафиксирована в системе частично.
        Будут либо выполнены все её подоперации, либо не выполнено ни одной.
    Consistency(Согласованность):
        Каждая успешная транзакция по определению фиксирует только допустимые результаты.
    Isolation(Изолированность):
        Во время выполнения транзакции параллельные транзакции не должны оказывать влияния на её результат.
    Durability(Долговечность):
        Если транзакция успешно завершена, сделанные в ней изменения не будут отменены из-за какого-либо сбоя.


Аннотации - методанные о коде
Содержат данные о программе, не являясь частью программы
Не влияют непосредственно на работу приложения
Влияют только на ту функциональность, которая их обрабатывает
Могут влиять на работу компилятора, инструментов и библиотек
"Decorating" or "wrapping" классы в runtime
на классах, методах, полях, параметрах

Annotation processors - плагины для компиляции,
разбирают аннотации,
могут создать дополнительный код,
можно написать свои плагины

@interface синтаксис аннотаций:
    не может наследовать или быть базовым классом
    не содержит конструкторов и полей
    может содержать методы без переменных, которые работают как поля
доступ к аннотациям через объект класса Class

Виды аннотаций: (по тому, откуда они видны)
    RetentionPolicy.SOURCE - аннотации присутствуют только в коде
        Информация для компилятора
        Информация для инструментов IDE
    RetentionPolicy.CLASS - сохранение в .class, но недоступны в runtime
        Доступны при анализе byte-кода
        Не доступны через reflection
    RetentionPolicy.RUNTIME - сохранены в .class и доступны в runtime
        Аннотации можно получать из getClass() через reflection API
    RetentionPolicy задается аннотацией @Retention (аннотация для указания типа аннотации)


ORM - связь между объектной моделью программы и реляционной моделью данных
по сути, мапает объекты в строки таблицы и обратно

Подход, который представляет взаимодействие с базой данных в виде взаимодействия с объектами,
предсталяющими таблицы реляционной базы данных

JPA только описывает правила и API, а Hibernate реализует эти описания,
впрочем у Hibernate (как и у многих других реализаций JPA) есть дополнительные возможности,
не описанные в JPA (и не переносимые на другие реализации JPA).

Java Persistence API
javax.persistence /jakarta
Аннотации:
    @Entity - объект класса можно переложить в таблицу
    @Table - связывает класс и таблицу
    @Id - поле является первичным ключом в таблице
    @Column - связывает поле и колонку в таблице

DataSet - объект содержащий данные одной строки таблицы
На каждую таблицу свой DataSet
Извлечение и вставку данных удобно проводить через DataSet-ы
В терминах JPA DataSet это Entity


DAO - Data Access Object - объект для доступа к данным
Шаблон проектирования скрывающий детали работы с базой
Обычно один DAO на одну таблицу
Высокоуровневый доступ к данным через DataSet-ы


Hibernate - реализация принципов ORM
настройка ебашится через пропертис, либо в коде
диалект
драйвер
урл
юзернейм
пароль
шоу_скл
hbm2ddl.auto:
    validate - проверка без изменений
    update - обновляет, если находит различия
    create - пересоздает таблицы
    create-drop - уничтожает таблицы при закрытии SessionFactory

SessionFactory - фабрика, которая создает сессии
Одна фабрика на поток
Одна сессия на запрос

Session
    Основной интерфейс между библиотекой и приложением
    Время работы сессии соответствует времени работы транзакции
    Задача сессии - работа с объектами, аннотированными как @Entity

HQL - Hibernate Query Language
запросы формируются объектами

DataNucleus
TopLink
MyBatis
EclipseLink
OpenJPA


4. Жизненный цикл объектов
Hibernate управляет объектами в разных состояниях:
    🔵 Transient (вне Hibernate)
        User user = new User(); // Не привязан к сессии
    🟢 Persistent (в сессии)
        session.persist(user); // Теперь Hibernate его отслеживает
    🔴 Detached (сессия закрыта)
        session.close(); // Hibernate больше не управляет объектом
    ❌ Removed (удалён)
        session.remove(user);


maven teory:
    maven - приложение для автоматизации сборки проектов

groupId - пакет проекта
artifactId - имя проекта
version - версия сборки
