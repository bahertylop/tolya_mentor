http сервер

java based http server

connector - принимает http запросы
handler(s) - вовращает response (обрабатывает запросы, вызывается потоками)
ThreadPool - pool потоков для обработки данных


Сервлет -


модель osi (open systems interconnection) - модель, разработанная для описания функций телекоммуниционных и вычислительных
систем, необходимых для сетевого взаимодействия. Разделяет процесс сетевого взаимолействия на 7 связанных уровней. Каждый
уровень выполняет специфические функции и взаимодействует с уровнями непоредственно выше и ниже.

проще - 7 разных уровней передачи информации

уровни модели osi:
    1. Физический уровень L1 (Physical Layer)  (уровень проводов и физ. сигналов)
        Функции: определяет электрические, механические и т.п. характеристики для активации, поддержания и деактивации
        физических соединений между конечными системами
       Примеры: кабели, разъемы, электрическое напряжение, физические топологии сетей
       Если совсем просто, это нули и единицы, передающиеся в кабелях с помощью электрических сигналов (витая пара)
       или света (оптоволоконные кабели).
    2. Канальный уровень L2 (Data Link Layer)  (обрабатывает данные пришедшие с первого уровня)
        Функции: Обеспечивает надежную передачу данных через физический канал. Включает задачи по обнаружению и исправлению ошибок,
         а также управление доступом к среде передачи.
        Примеры: Ethernet, Mac-адреса, фреймы, коммутаторы
        Если совсем просто, на этом уровне происходит передача информации в рамках одной локальной подсети
        с помощью таких устройств, как коммутатор. Эти устройства не обрабатывают данные выше L2 уровня и передают
        их с помощью определенных алгоритмов.
    3. Сетевой уровень L3 (Network Layer)
        Функции: отвечает за маршрутизацию пакетов данных между узлами сети. Обеспечивает логическую адресацию и определяет
         пути передачи данных через различные сети.
        Примеры: IP-адресация, маршрутизаторы, IP-протокол
        Если совсем просто, на этом уровне происходит передача информации между различными локальными сетями
        с помощью таких устройств, как маршрутизатор. Эти устройства не обрабатывают данные выше L3 уровня и
        передают их с помощью определенных алгоритмов между разными подсетями.
    4. Транспортный уровень L4 (Transport Layer)  (передача данных по сети)
        Функции: обеспечивает надежную передачу данных, контроль ошибок, сегментацию, повторную сборку данных. Гарантирует,
         что данные передаются без потерь и дубликатов.
        Примеры: TCP(Transmission Control Protocol), UDP(User Datagram Protocol)
        Если совсем просто, на этом уровне информация передается по сети с помощью протоколов уровня L4.
        Например, это могут быть файлы с вашего компьютера или потоковое видео, которое вы смотрите на видео хостинге.
    5. Сессионный уровень L5 (Session Layer)
        Функции: управляет сеансами связи между приложениями. Обеспечивает установку, поддержание и завершение сеансов,
         а также синхронизацию и управление обменом данными.
        Примеры: управление сеансами, контроль диалога
        Если совсем просто, то осуществляется установление, управление и завершение сеансов связи между приложениями
        с помощью протоколов.
    6. Представительный уровень L6 (Presentation Layer)
        Функции: отвечает за преобразование данных в формат, подходящий для приложения или сети. Включает в себя задачи
         по шифрованию, дешифрованию, сжатию и преобразованию данных.
        Примеры: шифрование, кодирование данных, перобразование форматов.
        Если совсем просто, происходит шифрование, сжатие и кодирование информации для обеспечения совместимости
        и безопасности передачи данных между различными системами.
    7. Прикладной уровень L7 (Application Layer)
        Функции: обеспечивает доступ приложений к сетевым услугам. Реализует протоколы, которые поддерживают
         конечные пользовательские процессы и сетевые приложения.
        Примеры: Http (HyperText Transport Protocol), FTP (File Transfer Protocol), SMTP (Simple Mail Transfer Protocol)
        Если совсем просто, осуществляется взаимодействие пользователя с приложениями, обеспечивая веб-серфинг,
        электронную почту и передачу файлов.


модель TCP/IP - похожа на osi, но имеет свои особенности
    Перый уровень - канальный. Объединяет L1 и L2 модеи osi
    Второй уровень - межсетевой. Идентичен сетевому уровню L3 модели osi
    Третий уровень - транспортный. Идентичен транспортному уровню L4 модели osi
    Четвертый уровень - прикладной. Объединяет L5 - L7 уровни модели osi


как работает http запрос:
    1. вводится http запрос
    2. браузер ищет в кеше ip домена, если не находит, то выполняет запрос к dns серверу,
    если нет на нем, то dns сервер отправляет запрос к другому dns серверу, пока не найдет ip
    3. браузер устанавливает с сервером tcp соединение
    4. отправляется запрос, обрабатывается на сервере, получается ответ
    5. обработка ответа в браузере

порт от 1 до 65535 на них работают программы
1 - 1024 - общепринятые
80 - http
443 - https
53 - dns
1025 - 49151 - зарегистрированные IANA
49152 - 65535 - для любых целей ос

tcp и udp:
    сообщение из прикладного уровня разбивается на сегменты с добавлением заголовка
    tcp - контролит доставку, переотправляет в случае ошибки
    (порт отправителя, порт получателя, порядковый номер сегмента, номер подтверждения, длина заголовка, флаги, размер окна, контрольная сумма(хэш заголовка и данных), указатель на срочные данные)

    udp - работает быстрее не гарантит доставку
    (порт отправителя, порт получателя, длина заголовка, контрольная сумма)


маршрутизаторы - гоняют данные между подсетями
сегменты превращаются в пакеты

ipv4 - 4 числа от 0 до 255
заголовок:
    номер версии, длина заголовка, тип обслуживания, общая длина пакета, ID пакета, флаги, смещение пакета, время жизни, тип протокола(входящего), контрольная сумма(хэш), ip отправителя, ip получателя)

    время жизни - максиамльное число маршрутизаторов

ipv6
заголовок:
    номер версии, класс трафика(тип обслуживания), метка потока, длина полезной нагрузки, следующий заголовок(тип протокола), время жизни - число переходов, ip получателя, ip отправителя


1 подсеть - канальная среда отделена коммутатором,
данные передаются по mac-адресам, mac-адрес для устройства с завода
канальный уровень - передача в локалке до комутатора
    ip пакет -> кадр канальной сети (заголовок, данные, контрольная сумма)

заголовок: (mac получателя, mac отправителя, тип протокола полученного)
добавляется 8 бит в начале, 7 одинаковых 1 отличается, чтобы различать кадры между собой




http как это работает?
http - HyperText Transfer Protocol - протокол 7 уровня osi

HTTP — широко распространённый протокол передачи данных, изначально предназначенный для передачи
гипертекстовых документов (то есть документов, которые могут содержать ссылки, позволяющие организовать
переход к другим документам).

Запрос HTTP состоит из трех основных частей:
    Запрос
    Заголовки (не обязательно)
    Тело сообщения (не обязательно)

GET     Запрос на передачу ресурса
HEAD    Запрос на передачу ресурса, но сам ресурс в ответе не передается, только заголовки.
POST    Передача данных на сервер для обработки указанного ресурса.
PUT     Размещение ресурса на сервере (если такой ресурс уже есть на сервере, то он замещается).
DELETE  Удаление ресурса на сервере.
CONNECT Установка соединение с сервером на основе ресурса.
OPTIONS Запрос поддерживаемых методов HTTP для ресурса и других параметров коммуникации.
TRACE   Запрос на трассировку сообщения: сервер должен включить в свой ответ исходный запрос, на который он отвечает.
Это полезно, когда запрос проходит через промежуточные устройства, которые могут изменить запрос, например, добавить заголовки.

статусы ответов:
    1ХХ (информация): запрос получен, обработка продолжается.
    2ХХ (успешное выполнение): запрос был успешно принят и понят.
    3ХХ (перенаправление): для выполнения запроса необходимо предпринять дополнительные действия.
    4ХХ (ошибка клиента): запрос содержит синтаксическую ошибку или не может быть выполнен.
    5ХХ (ошибка сервера): запрос от клиента оформлен правильно, но при его обработке произошла ошибка на стороне сервера.


Apache Maven — фреймворк для автоматизации сборки проектов на основе описания их структуры в файлах POM, на языке XML.
maven - система сборки проектов
Вся структура проекта описывается в файле pom.xml (POM – Project Object Model),
который должен находиться в корневой папке проекта.

Зависимости — это те библиотеки, которые непосредственно используются в вашем проекте для компиляции кода или его тестирования.
жизненный цикл:
    clean — удаляются все скомпилированные файлы из каталога target (место, в котором сохраняются готовые артефакты);
    validate — идет проверка, вся ли информация доступна для сборки проекта;
    compile — компилируются файлы с исходным кодом;
    test — запускаются тесты;
    package — упаковываются скомпилированные файлы (в jar, war и т.д. архив);
    verify — выполняются проверки для подтверждения готовности упакованного файла;
    install — пакет помещается в локальный репозиторий. Теперь он может использоваться другими проектами как внешняя библиотека;
    site — создается документация проекта;
    deploy — собранный архив копируется в удаленный репозиторий.


что такое сервлеты?
Сервлет (Servlet) – это Java-класс, который обрабатывает HTTP-запросы и формирует HTTP-ответы. Он работает на
сервере приложений (например, Jetty, Tomcat) и отвечает за динамическую генерацию контента.